diff --git a/Gulpfile.js b/Gulpfile.js
index 5df9882ca..0766fa3ca 100644
--- a/Gulpfile.js
+++ b/Gulpfile.js
@@ -4,7 +4,7 @@ const plumber = require("gulp-plumber");
 const through = require("through2");
 const chalk = require("chalk");
 const newer = require("gulp-newer");
-const babel = require("gulp-babel");
+const sucrase = require("@sucrase/gulp-plugin");
 const gulpWatch = require("gulp-watch");
 const fancyLog = require("fancy-log");
 const filter = require("gulp-filter");
@@ -73,7 +73,7 @@ function buildBabel(exclude) {
         .pipe(errorsLogger())
         .pipe(newer({ dest: base, map: swapSrcWithLib }))
         .pipe(compilationLogger())
-        .pipe(babel())
+        .pipe(sucrase({transforms: ["flow", "imports"]}))
         .pipe(
           // Passing 'file.relative' because newer() above uses a relative
           // path and this keeps it consistent.
@@ -114,7 +114,7 @@ function buildRollup(packages) {
   );
 }
 
-const bundles = ["packages/babel-parser"];
+const bundles = [];
 
 gulp.task("build-rollup", () => buildRollup(bundles));
 gulp.task("build-babel", () => buildBabel(/* exclude */ bundles));
diff --git a/Makefile b/Makefile
index dc858ab2e..16cc7fd47 100644
--- a/Makefile
+++ b/Makefile
@@ -78,7 +78,9 @@ test-only:
 	BABEL_ENV=test ./scripts/test.sh
 	make test-clean
 
-test: lint test-only
+test:
+	make bootstrap
+	make test-only
 
 test-ci: bootstrap test-only
 
@@ -154,6 +156,11 @@ endif
 
 bootstrap-only: clean-all
 	yarn --ignore-engines
+	yarn link sucrase
+	yarn link @sucrase/gulp-plugin
+	yarn link @sucrase/jest-plugin
+	yarn link @sucrase/webpack-loader
+	yarn link @sucrase/webpack-object-rest-spread-plugin
 	./node_modules/.bin/lerna bootstrap -- --ignore-engines
 
 bootstrap: bootstrap-only
diff --git a/package.json b/package.json
index 44df123af..61feed3e8 100644
--- a/package.json
+++ b/package.json
@@ -89,6 +89,9 @@
     }
   },
   "jest": {
+    "transform": {
+      ".js": "@sucrase/jest-plugin"
+    },
     "collectCoverageFrom": [
       "packages/*/src/**/*.mjs",
       "packages/*/src/**/*.js",
diff --git a/packages/babel-parser/src/util/scopeflags.js b/packages/babel-parser/src/util/scopeflags.js
index 8c9697b3a..e31b3d387 100644
--- a/packages/babel-parser/src/util/scopeflags.js
+++ b/packages/babel-parser/src/util/scopeflags.js
@@ -2,17 +2,19 @@
 
 // Each scope gets a bitset that may contain these flags
 // prettier-ignore
-export const SCOPE_OTHER        = 0b000000000,
-             SCOPE_PROGRAM      = 0b000000001,
-             SCOPE_FUNCTION     = 0b000000010,
-             SCOPE_ASYNC        = 0b000000100,
-             SCOPE_GENERATOR    = 0b000001000,
-             SCOPE_ARROW        = 0b000010000,
-             SCOPE_SIMPLE_CATCH = 0b000100000,
-             SCOPE_SUPER        = 0b001000000,
-             SCOPE_DIRECT_SUPER = 0b010000000,
-             SCOPE_CLASS        = 0b100000000,
-             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION;
+export const SCOPE_OTHER        = 0b000000000;
+// TODO(#455): This was changed to simpler code to work with Sucrase. Fix the
+// Sucrase bug to avoid this patch hunk.
+export const SCOPE_PROGRAM      = 0b000000001;
+export const SCOPE_FUNCTION     = 0b000000010;
+export const SCOPE_ASYNC        = 0b000000100;
+export const SCOPE_GENERATOR    = 0b000001000;
+export const SCOPE_ARROW        = 0b000010000;
+export const SCOPE_SIMPLE_CATCH = 0b000100000;
+export const SCOPE_SUPER        = 0b001000000;
+export const SCOPE_DIRECT_SUPER = 0b010000000;
+export const SCOPE_CLASS        = 0b100000000;
+export const SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION;
 
 export type ScopeFlags =
   | typeof SCOPE_OTHER
@@ -37,39 +39,39 @@ export function functionFlags(isAsync: boolean, isGenerator: boolean) {
 
 // These flags are meant to be _only_ used inside the Scope class (or subclasses).
 // prettier-ignore
-export const BIND_KIND_VALUE           = 0b00000_0000_01,
-             BIND_KIND_TYPE            = 0b00000_0000_10,
+export const BIND_KIND_VALUE           = 0b00000_0000_01;
+export const BIND_KIND_TYPE            = 0b00000_0000_10;
              // Used in checkLVal and declareName to determine the type of a binding
-             BIND_SCOPE_VAR            = 0b00000_0001_00, // Var-style binding
-             BIND_SCOPE_LEXICAL        = 0b00000_0010_00, // Let- or const-style binding
-             BIND_SCOPE_FUNCTION       = 0b00000_0100_00, // Function declaration
-             BIND_SCOPE_OUTSIDE        = 0b00000_1000_00, // Special case for function names as
+export const BIND_SCOPE_VAR            = 0b00000_0001_00; // Var-style binding
+export const BIND_SCOPE_LEXICAL        = 0b00000_0010_00; // Let- or const-style binding
+export const BIND_SCOPE_FUNCTION       = 0b00000_0100_00; // Function declaration
+export const BIND_SCOPE_OUTSIDE        = 0b00000_1000_00; // Special case for function names as
                                                    // bound inside the function
              // Misc flags
-             BIND_FLAGS_NONE           = 0b00001_0000_00,
-             BIND_FLAGS_CLASS          = 0b00010_0000_00,
-             BIND_FLAGS_TS_ENUM        = 0b00100_0000_00,
-             BIND_FLAGS_TS_CONST_ENUM  = 0b01000_0000_00,
-             BIND_FLAGS_TS_EXPORT_ONLY = 0b10000_0000_00;
+export const BIND_FLAGS_NONE           = 0b00001_0000_00;
+export const BIND_FLAGS_CLASS          = 0b00010_0000_00;
+export const BIND_FLAGS_TS_ENUM        = 0b00100_0000_00;
+export const BIND_FLAGS_TS_CONST_ENUM  = 0b01000_0000_00;
+export const BIND_FLAGS_TS_EXPORT_ONLY = 0b10000_0000_00;
 
 // These flags are meant to be _only_ used by Scope consumers
 // prettier-ignore
 /*                              =    is value?    |    is type?    |      scope          |    misc flags    */
-export const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,
-             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,
-             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,
-             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,
-             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,
-             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,
-             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,
-             BIND_TS_FN_TYPE    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,
+export const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ;
+export const BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ;
+export const BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ;
+export const BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ;
+export const BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ;
+export const BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ;
+export const BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM;
+export const BIND_TS_FN_TYPE    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY;
              // These bindings don't introduce anything in the scope. They are used for assignments and
              // function expressions IDs.
-             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,
-             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,
+export const BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ;
+export const BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ;
 
-             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,
-             BIND_TS_NAMESPACE  = BIND_TS_FN_TYPE;
+export const BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM;
+export const BIND_TS_NAMESPACE  = BIND_TS_FN_TYPE;
 
 export type BindingTypes =
   | typeof BIND_NONE
diff --git a/scripts/gulp-tasks.js b/scripts/gulp-tasks.js
index 73c1f7db2..59c35bfcf 100644
--- a/scripts/gulp-tasks.js
+++ b/scripts/gulp-tasks.js
@@ -23,6 +23,8 @@ const DuplicatePackageCheckerPlugin = require("duplicate-package-checker-webpack
 const WarningsToErrorsPlugin = require("warnings-to-errors-webpack-plugin");
 const webpackStream = require("webpack-stream");
 const uglify = require("gulp-uglify");
+const ObjectRestSpreadPlugin = require("@sucrase/webpack-object-rest-spread-plugin");
+
 
 function webpackBuild(opts) {
   const plugins = opts.plugins || [];
@@ -41,12 +43,8 @@ function webpackBuild(opts) {
       rules: [
         {
           test: /\.js$/,
-          loader: "babel-loader",
-          options: {
-            // Use the bundled config so that module syntax is passed through
-            // for Webpack.
-            envName: "standalone",
-          },
+          loader: "@sucrase/webpack-loader",
+          options: {transforms: ["imports", "flow"]},
         },
       ],
     },
@@ -63,6 +61,7 @@ function webpackBuild(opts) {
       libraryTarget: "umd",
     },
     plugins: [
+      new ObjectRestSpreadPlugin(),
       new WarningsToErrorsPlugin(),
       new DuplicatePackageCheckerPlugin({
         exclude(instance) {
