diff --git a/Gulpfile.js b/Gulpfile.js
index dcdf818e3..acfa8f4f4 100644
--- a/Gulpfile.js
+++ b/Gulpfile.js
@@ -4,7 +4,7 @@ const plumber = require("gulp-plumber");
 const through = require("through2");
 const chalk = require("chalk");
 const newer = require("gulp-newer");
-const babel = require("gulp-babel");
+const sucrase = require("@sucrase/gulp-plugin");
 const watch = require("gulp-watch");
 const gutil = require("gulp-util");
 const filter = require("gulp-filter");
@@ -33,7 +33,7 @@ gulp.task("build", function() {
   return merge(
     sources.map(source => {
       const base = path.join(__dirname, source);
-      const f = filter(["**", "!**/packages/babylon/**"]);
+      const f = filter(["**"]);
 
       return gulp
         .src(getGlobFromSource(source), { base: base })
@@ -57,7 +57,7 @@ gulp.task("build", function() {
             callback(null, file);
           })
         )
-        .pipe(babel())
+        .pipe(sucrase({transforms: ["imports", "flow"]}))
         .pipe(
           through.obj(function(file, enc, callback) {
             // Passing 'file.relative' because newer() above uses a relative
diff --git a/Makefile b/Makefile
index 9f07ae0e2..64cd4c94e 100644
--- a/Makefile
+++ b/Makefile
@@ -14,7 +14,7 @@ SOURCES = packages codemods
 build: clean
 	make clean-lib
   # Build babylon before building all other projects
-	make build-babylon
+	# make build-babylon
 	./node_modules/.bin/gulp build
 	node ./packages/babel-types/scripts/generateTypeHelpers.js
 	# call build again as the generated files might need to be compiled again.
@@ -72,7 +72,10 @@ test-only:
 	./scripts/test.sh
 	make test-clean
 
-test: lint test-only
+test:
+	make bootstrap
+	./scripts/test.sh
+	make test-clean
 
 test-ci:
 	make bootstrap
@@ -129,8 +132,9 @@ publish:
 	make clean
 
 bootstrap:
-	make clean-all
 	yarn
+	yarn link sucrase
+	yarn link @sucrase/gulp-plugin
 	./node_modules/.bin/lerna bootstrap
 	make build
 	cd packages/babel-runtime; \
diff --git a/scripts/gulp-tasks.js b/scripts/gulp-tasks.js
index 2e4891efb..5c4d51602 100644
--- a/scripts/gulp-tasks.js
+++ b/scripts/gulp-tasks.js
@@ -19,6 +19,7 @@ const RootMostResolvePlugin = require("webpack-dependency-suite")
 const webpack = require("webpack");
 const webpackStream = require("webpack-stream");
 const uglify = require("gulp-uglify");
+const ObjectRestSpreadPlugin = require("@sucrase/webpack-object-rest-spread-plugin");
 
 function webpackBuild(opts) {
   const plugins = opts.plugins || [];
@@ -38,47 +39,18 @@ function webpackBuild(opts) {
         {
           test: /\.js$/,
           include: /node_modules/,
-          loader: "babel-loader",
-          options: {
-            // Some of the node_modules may have their own "babel" section in
-            // their project.json (or a ".babelrc" file). We need to ignore
-            // those as we're using our own Babel options.
-            babelrc: false,
-            presets: [
-              [
-                "@babel/env",
-                {
-                  loose: true,
-                  exclude: ["transform-typeof-symbol"],
-                },
-              ],
-            ],
-          },
+          loader: "@sucrase/webpack-loader",
+          options: {transforms: ["imports", "flow"]},
         },
         {
           test: /\.js$/,
           exclude: /node_modules/,
-          loader: "babel-loader",
-          options: {
-            // Some of the node_modules may have their own "babel" section in
-            // their project.json (or a ".babelrc" file). We need to ignore
-            // those as we're using our own Babel options.
-            babelrc: false,
-            presets: [
-              [
-                "@babel/env",
-                {
-                  loose: true,
-                  exclude: ["transform-typeof-symbol"],
-                },
-              ],
-              ["@babel/stage-0", { loose: true }],
-            ],
-          },
+          loader: "@sucrase/webpack-loader",
+          options: {transforms: ["imports", "flow"]},
         },
       ],
       // babylon is already bundled and does not require parsing
-      noParse: [/babylon\/lib/],
+      // noParse: [/babylon\/lib/],
     },
     node: {
       // Mock Node.js modules that Babel require()s but that we don't
@@ -93,6 +65,7 @@ function webpackBuild(opts) {
       libraryTarget: "umd",
     },
     plugins: [
+      new ObjectRestSpreadPlugin(),
       new webpack.DefinePlugin({
         "process.env.NODE_ENV": '"production"',
         "process.env": JSON.stringify({ NODE_ENV: "production" }),
@@ -149,7 +122,7 @@ function registerStandalonePackageTask(
           plugins,
         }),
         gulp.dest(standalonePath),
-        uglify(),
+        // uglify(),
         rename({ extname: ".min.js" }),
         gulp.dest(standalonePath),
       ],
diff --git a/test/mocha.opts b/test/mocha.opts
index 939595b1b..20955e894 100644
--- a/test/mocha.opts
+++ b/test/mocha.opts
@@ -1 +1 @@
---reporter dot --ui tdd --timeout 10000 --compilers js:@babel/register
+--reporter dot --ui tdd --timeout 10000 --compilers js:sucrase/register/js
