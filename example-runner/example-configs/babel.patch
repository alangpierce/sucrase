diff --git a/Gulpfile.js b/Gulpfile.js
index c8a60079b..b49041ae6 100644
--- a/Gulpfile.js
+++ b/Gulpfile.js
@@ -4,7 +4,7 @@ const plumber = require("gulp-plumber");
 const through = require("through2");
 const chalk = require("chalk");
 const newer = require("gulp-newer");
-const babel = require("gulp-babel");
+const sucrase = require("@sucrase/gulp-plugin");
 const gulpWatch = require("gulp-watch");
 const fancyLog = require("fancy-log");
 const filter = require("gulp-filter");
@@ -66,7 +66,7 @@ function buildBabel(exclude, sourcesGlob = defaultSourcesGlob) {
     .pipe(errorsLogger())
     .pipe(newer({ dest: base, map: swapSrcWithLib }))
     .pipe(compilationLogger())
-    .pipe(babel())
+    .pipe(sucrase({transforms: ["flow", "imports"]}))
     .pipe(
       // Passing 'file.relative' because newer() above uses a relative
       // path and this keeps it consistent.
@@ -105,7 +105,7 @@ function buildRollup(packages) {
   );
 }
 
-const bundles = ["packages/babel-parser"];
+const bundles = [];
 
 gulp.task("build-rollup", () => buildRollup(bundles));
 gulp.task("build-babel", () => buildBabel(/* exclude */ bundles));
diff --git a/Makefile b/Makefile
index 2c077a3fb..dfa6ff5e7 100644
--- a/Makefile
+++ b/Makefile
@@ -129,7 +129,9 @@ test-only:
 	BABEL_ENV=test ./scripts/test.sh
 	$(MAKE) test-clean
 
-test: lint test-only
+test:
+	make bootstrap
+	make test-only
 
 test-ci: jest-ci
 
@@ -207,7 +209,14 @@ endif
 	rm -f .npmrc
 	$(MAKE) clean
 
-bootstrap-only: lerna-bootstrap
+bootstrap-only: clean-all
+	yarn --ignore-engines
+	yarn link sucrase
+	yarn link @sucrase/gulp-plugin
+	yarn link @sucrase/jest-plugin
+	yarn link @sucrase/webpack-loader
+	yarn link @sucrase/webpack-object-rest-spread-plugin
+	./node_modules/.bin/lerna bootstrap
 
 yarn-install: clean-all
 	yarn --ignore-engines
diff --git a/package.json b/package.json
index a420748f1..7678c4796 100644
--- a/package.json
+++ b/package.json
@@ -91,6 +91,9 @@
     }
   },
   "jest": {
+    "transform": {
+      ".js": "@sucrase/jest-plugin"
+    },
     "collectCoverageFrom": [
       "packages/*/src/**/*.mjs",
       "packages/*/src/**/*.js",
diff --git a/packages/babel-parser/src/util/scopeflags.js b/packages/babel-parser/src/util/scopeflags.js
index d92699883..2bdedecaa 100644
--- a/packages/babel-parser/src/util/scopeflags.js
+++ b/packages/babel-parser/src/util/scopeflags.js
@@ -2,18 +2,20 @@
 
 // Each scope gets a bitset that may contain these flags
 // prettier-ignore
-export const SCOPE_OTHER        = 0b0000000000,
-             SCOPE_PROGRAM      = 0b0000000001,
-             SCOPE_FUNCTION     = 0b0000000010,
-             SCOPE_ASYNC        = 0b0000000100,
-             SCOPE_GENERATOR    = 0b0000001000,
-             SCOPE_ARROW        = 0b0000010000,
-             SCOPE_SIMPLE_CATCH = 0b0000100000,
-             SCOPE_SUPER        = 0b0001000000,
-             SCOPE_DIRECT_SUPER = 0b0010000000,
-             SCOPE_CLASS        = 0b0100000000,
-             SCOPE_TS_MODULE    = 0b1000000000,
-             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;
+export const SCOPE_OTHER        = 0b0000000000;
+// TODO(#455): This was changed to simpler code to work with Sucrase. Fix the
+// Sucrase bug to avoid this patch hunk.
+export const SCOPE_PROGRAM      = 0b0000000001;
+export const SCOPE_FUNCTION     = 0b0000000010;
+export const SCOPE_ASYNC        = 0b0000000100;
+export const SCOPE_GENERATOR    = 0b0000001000;
+export const SCOPE_ARROW        = 0b0000010000;
+export const SCOPE_SIMPLE_CATCH = 0b0000100000;
+export const SCOPE_SUPER        = 0b0001000000;
+export const SCOPE_DIRECT_SUPER = 0b0010000000;
+export const SCOPE_CLASS        = 0b0100000000;
+export const SCOPE_TS_MODULE    = 0b1000000000;
+export const SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;
 
 export type ScopeFlags =
   | typeof SCOPE_OTHER
@@ -38,39 +40,39 @@ export function functionFlags(isAsync: boolean, isGenerator: boolean) {
 
 // These flags are meant to be _only_ used inside the Scope class (or subclasses).
 // prettier-ignore
-export const BIND_KIND_VALUE           = 0b00000_0000_01,
-             BIND_KIND_TYPE            = 0b00000_0000_10,
+export const BIND_KIND_VALUE           = 0b00000_0000_01;
+export const BIND_KIND_TYPE            = 0b00000_0000_10;
              // Used in checkLVal and declareName to determine the type of a binding
-             BIND_SCOPE_VAR            = 0b00000_0001_00, // Var-style binding
-             BIND_SCOPE_LEXICAL        = 0b00000_0010_00, // Let- or const-style binding
-             BIND_SCOPE_FUNCTION       = 0b00000_0100_00, // Function declaration
-             BIND_SCOPE_OUTSIDE        = 0b00000_1000_00, // Special case for function names as
+export const BIND_SCOPE_VAR            = 0b00000_0001_00; // Var-style binding
+export const BIND_SCOPE_LEXICAL        = 0b00000_0010_00; // Let- or const-style binding
+export const BIND_SCOPE_FUNCTION       = 0b00000_0100_00; // Function declaration
+export const BIND_SCOPE_OUTSIDE        = 0b00000_1000_00; // Special case for function names as
                                                    // bound inside the function
              // Misc flags
-             BIND_FLAGS_NONE           = 0b00001_0000_00,
-             BIND_FLAGS_CLASS          = 0b00010_0000_00,
-             BIND_FLAGS_TS_ENUM        = 0b00100_0000_00,
-             BIND_FLAGS_TS_CONST_ENUM  = 0b01000_0000_00,
-             BIND_FLAGS_TS_EXPORT_ONLY = 0b10000_0000_00;
+export const BIND_FLAGS_NONE           = 0b00001_0000_00;
+export const BIND_FLAGS_CLASS          = 0b00010_0000_00;
+export const BIND_FLAGS_TS_ENUM        = 0b00100_0000_00;
+export const BIND_FLAGS_TS_CONST_ENUM  = 0b01000_0000_00;
+export const BIND_FLAGS_TS_EXPORT_ONLY = 0b10000_0000_00;
 
 // These flags are meant to be _only_ used by Scope consumers
 // prettier-ignore
 /*                              =    is value?    |    is type?    |      scope          |    misc flags    */
-export const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,
-             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,
-             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,
-             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,
-             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,
-             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,
-             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,
-             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,
+export const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ;
+export const BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ;
+export const BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ;
+export const BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ;
+export const BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ;
+export const BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ;
+export const BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM;
+export const BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY;
              // These bindings don't introduce anything in the scope. They are used for assignments and
              // function expressions IDs.
-             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,
-             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,
+export const BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ;
+export const BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ;
 
-             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,
-             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY;
+export const BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM;
+export const BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY;
 
 export type BindingTypes =
   | typeof BIND_NONE
diff --git a/packages/babel-plugin-proposal-dynamic-import/test/fixtures/commonjs/to-string/input.js b/packages/babel-plugin-proposal-dynamic-import/test/fixtures/commonjs/to-string/input.js
deleted file mode 100644
index 130d3cafa..000000000
--- a/packages/babel-plugin-proposal-dynamic-import/test/fixtures/commonjs/to-string/input.js
+++ /dev/null
@@ -1 +0,0 @@
-import(2);
diff --git a/packages/babel-plugin-proposal-dynamic-import/test/fixtures/commonjs/to-string/output.js b/packages/babel-plugin-proposal-dynamic-import/test/fixtures/commonjs/to-string/output.js
deleted file mode 100644
index 1babb42d8..000000000
--- a/packages/babel-plugin-proposal-dynamic-import/test/fixtures/commonjs/to-string/output.js
+++ /dev/null
@@ -1 +0,0 @@
-Promise.resolve().then(() => babelHelpers.interopRequireWildcard(require(`${2}`)));
diff --git a/packages/babel-plugin-transform-classes/test/fixtures/regression/T6755/output.js b/packages/babel-plugin-transform-classes/test/fixtures/regression/T6755/output.js
index 204120c62..1950ebc1c 100644
--- a/packages/babel-plugin-transform-classes/test/fixtures/regression/T6755/output.js
+++ b/packages/babel-plugin-transform-classes/test/fixtures/regression/T6755/output.js
@@ -20,7 +20,7 @@ function () {
             return _context.stop();
         }
       }
-    });
+    }, null, null, null, Promise);
   };
 
   _proto.test2 =
diff --git a/packages/babel-plugin-transform-dotall-regex/test/fixtures/dotall-regex/with-unicode-property-escape/output.js b/packages/babel-plugin-transform-dotall-regex/test/fixtures/dotall-regex/with-unicode-property-escape/output.js
index a8ddf757d..c00aa15a9 100644
--- a/packages/babel-plugin-transform-dotall-regex/test/fixtures/dotall-regex/with-unicode-property-escape/output.js
+++ b/packages/babel-plugin-transform-dotall-regex/test/fixtures/dotall-regex/with-unicode-property-escape/output.js
@@ -1,2 +1,2 @@
-var a = /[\u3400-\u4DB5\u4E00-\u9FEF\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29\u{20000}-\u{2A6D6}\u{2A700}-\u{2B734}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}][\0-\t\x0B\f\x0E-\u2027\u202A-\u{10FFFF}]/u;
-var b = /[\u3400-\u4DB5\u4E00-\u9FEF\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29\u{20000}-\u{2A6D6}\u{2A700}-\u{2B734}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}][\0-\u{10FFFF}]/u;
+var a = /[\u3400-\u4DBF\u4E00-\u9FFC\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29\u{20000}-\u{2A6DD}\u{2A700}-\u{2B734}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{30000}-\u{3134A}][\0-\t\x0B\f\x0E-\u2027\u202A-\u{10FFFF}]/u;
+var b = /[\u3400-\u4DBF\u4E00-\u9FFC\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29\u{20000}-\u{2A6DD}\u{2A700}-\u{2B734}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{30000}-\u{3134A}][\0-\u{10FFFF}]/u;
diff --git a/packages/babel-plugin-transform-regenerator/test/fixtures/regression/4219/output.js b/packages/babel-plugin-transform-regenerator/test/fixtures/regression/4219/output.js
index a3b8fd1f2..3fa934c71 100644
--- a/packages/babel-plugin-transform-regenerator/test/fixtures/regression/4219/output.js
+++ b/packages/babel-plugin-transform-regenerator/test/fixtures/regression/4219/output.js
@@ -12,6 +12,6 @@ function test(fn) {
             return _context.stop();
         }
       }
-    });
+    }, null, null, null, Promise);
   };
 }
diff --git a/packages/babel-polyfill/src/index.js b/packages/babel-polyfill/src/index.js
index aa1b4639f..cca92db5a 100644
--- a/packages/babel-polyfill/src/index.js
+++ b/packages/babel-polyfill/src/index.js
@@ -7,7 +7,7 @@ if (global._babelPolyfill && typeof console !== "undefined" && console.warn) {
     "@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended " +
       "and may have consequences if different versions of the polyfills are applied sequentially. " +
       "If you do need to load the polyfill more than once, use @babel/polyfill/noConflict " +
-      "instead to bypass the warning.",
+      "instead to bypass the warning."
   );
 }
 
diff --git a/packages/babel-preset-env/test/fixtures.js b/packages/babel-preset-env/test/fixtures.js
deleted file mode 100644
index 1b534b8fc..000000000
--- a/packages/babel-preset-env/test/fixtures.js
+++ /dev/null
@@ -1,3 +0,0 @@
-import runner from "@babel/helper-plugin-test-runner";
-
-runner(__dirname);
diff --git a/scripts/gulp-tasks.js b/scripts/gulp-tasks.js
index 73c1f7db2..59c35bfcf 100644
--- a/scripts/gulp-tasks.js
+++ b/scripts/gulp-tasks.js
@@ -23,6 +23,8 @@ const DuplicatePackageCheckerPlugin = require("duplicate-package-checker-webpack
 const WarningsToErrorsPlugin = require("warnings-to-errors-webpack-plugin");
 const webpackStream = require("webpack-stream");
 const uglify = require("gulp-uglify");
+const ObjectRestSpreadPlugin = require("@sucrase/webpack-object-rest-spread-plugin");
+
 
 function webpackBuild(opts) {
   const plugins = opts.plugins || [];
@@ -41,12 +43,8 @@ function webpackBuild(opts) {
       rules: [
         {
           test: /\.js$/,
-          loader: "babel-loader",
-          options: {
-            // Use the bundled config so that module syntax is passed through
-            // for Webpack.
-            envName: "standalone",
-          },
+          loader: "@sucrase/webpack-loader",
+          options: {transforms: ["imports", "flow"]},
         },
       ],
     },
@@ -63,6 +61,7 @@ function webpackBuild(opts) {
       libraryTarget: "umd",
     },
     plugins: [
+      new ObjectRestSpreadPlugin(),
       new WarningsToErrorsPlugin(),
       new DuplicatePackageCheckerPlugin({
         exclude(instance) {
